// Code generated by MockGen. DO NOT EDIT.
// Source: hook.go

// Package mock_exdriver is a generated GoMock package.
package mock_exdriver

import (
	context "context"
	driver "database/sql/driver"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueryHook is a mock of QueryHook interface.
type MockQueryHook struct {
	ctrl     *gomock.Controller
	recorder *MockQueryHookMockRecorder
}

// MockQueryHookMockRecorder is the mock recorder for MockQueryHook.
type MockQueryHookMockRecorder struct {
	mock *MockQueryHook
}

// NewMockQueryHook creates a new mock instance.
func NewMockQueryHook(ctrl *gomock.Controller) *MockQueryHook {
	mock := &MockQueryHook{ctrl: ctrl}
	mock.recorder = &MockQueryHookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryHook) EXPECT() *MockQueryHookMockRecorder {
	return m.recorder
}

// HookQuery mocks base method.
func (m *MockQueryHook) HookQuery(ctx context.Context, query string, args []driver.NamedValue) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HookQuery", ctx, query, args)
}

// HookQuery indicates an expected call of HookQuery.
func (mr *MockQueryHookMockRecorder) HookQuery(ctx, query, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HookQuery", reflect.TypeOf((*MockQueryHook)(nil).HookQuery), ctx, query, args)
}
