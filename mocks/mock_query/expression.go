// Code generated by MockGen. DO NOT EDIT.
// Source: expression.go

// Package mock_query is a generated GoMock package.
package mock_query

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockExpression is a mock of Expression interface.
type MockExpression struct {
	ctrl     *gomock.Controller
	recorder *MockExpressionMockRecorder
}

// MockExpressionMockRecorder is the mock recorder for MockExpression.
type MockExpressionMockRecorder struct {
	mock *MockExpression
}

// NewMockExpression creates a new mock instance.
func NewMockExpression(ctrl *gomock.Controller) *MockExpression {
	mock := &MockExpression{ctrl: ctrl}
	mock.recorder = &MockExpressionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpression) EXPECT() *MockExpressionMockRecorder {
	return m.recorder
}

// Expression mocks base method.
func (m *MockExpression) Expression(column string) (string, []any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expression", column)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Expression indicates an expected call of Expression.
func (mr *MockExpressionMockRecorder) Expression(column interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expression", reflect.TypeOf((*MockExpression)(nil).Expression), column)
}
